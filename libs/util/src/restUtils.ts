/* istanbul ignore file */

import { Routes, Snowflake } from 'discord-api-types/v8';
import { RestManager } from '@cordis/rest';
// eslint-disable-next-line no-duplicate-imports
import type {
  APIAuditLog,
  APIChannel,
  APIGuildPreview,
  APIMessage,
  APIWebhook,
  RESTDeleteAPIChannelAllMessageReactionsResult,
  RESTDeleteAPIChannelMessageOwnReaction,
  RESTDeleteAPIChannelMessageReactionResult,
  RESTDeleteAPIChannelMessageUserReactionResult,
  RESTDeleteAPIChannelPermissionResult,
  RESTDeleteAPIChannelPinResult,
  RESTDeleteAPICurrentUserGuildResult,
  RESTDeleteAPIGuildBanResult,
  RESTDeleteAPIGuildEmojiResult,
  RESTDeleteAPIGuildIntegrationResult,
  RESTDeleteAPIGuildMemberResult,
  RESTDeleteAPIGuildMemberRoleResult,
  RESTDeleteAPIGuildResult,
  RESTDeleteAPIGuildRoleResult,
  RESTDeleteAPIGuildTemplateResult,
  RESTDeleteAPIInviteResult,
  RESTDeleteAPIWebhookResult,
  RESTGetAPIAuditLogQuery,
  RESTGetAPIChannelInvitesResult,
  RESTGetAPIChannelMessageResult,
  RESTGetAPIChannelMessagesQuery,
  RESTGetAPIChannelMessagesResult,
  RESTGetAPIChannelPinsResult,
  RESTGetAPIChannelWebhooksResult,
  RESTGetAPICurrentUserConnectionsResult,
  RESTGetAPICurrentUserResult,
  RESTGetAPIGuildBanResult,
  RESTGetAPIGuildBansResult,
  RESTGetAPIGuildChannelsResult,
  RESTGetAPIGuildEmojiResult,
  RESTGetAPIGuildEmojisResult,
  RESTGetAPIGuildIntegrationsResult,
  RESTGetAPIGuildInvitesResult,
  RESTGetAPIGuildMemberResult,
  RESTGetAPIGuildPruneCountQuery,
  RESTGetAPIGuildPruneCountResult,
  RESTGetAPIGuildResult,
  RESTGetAPIGuildRolesResult,
  RESTGetAPIGuildTemplatesResult,
  RESTGetAPIGuildVanityUrlResult,
  RESTGetAPIGuildVoiceRegionsResult,
  RESTGetAPIGuildWidgetImageQuery,
  RESTGetAPIGuildWidgetImageResult,
  RESTGetAPIGuildWidgetJSONResult,
  RESTGetAPIInviteResult,
  RESTGetAPITemplateResult,
  RESTGetAPIUserResult,
  RESTGetAPIWebhookResult,
  RESTPatchAPIChannelJSONBody,
  RESTPatchAPIChannelMessageJSONBody,
  RESTPatchAPIChannelMessageResult,
  RESTPatchAPIChannelResult,
  RESTPatchAPICurrentGuildMemberNicknameJSONBody,
  RESTPatchAPICurrentGuildMemberNicknameResult,
  RESTPatchAPICurrentUserJSONBody,
  RESTPatchAPICurrentUserResult,
  RESTPatchAPIGuildEmojiJSONBody,
  RESTPatchAPIGuildEmojiResult,
  RESTPatchAPIGuildIntegrationJSONBody,
  RESTPatchAPIGuildIntegrationResult,
  RESTPatchAPIGuildJSONBody,
  RESTPatchAPIGuildMemberJSONBody,
  RESTPatchAPIGuildMemberResult,
  RESTPatchAPIGuildResult,
  RESTPatchAPIGuildRoleJSONBody,
  RESTPatchAPIGuildRolePositionsJSONBody,
  RESTPatchAPIGuildRolePositionsResult,
  RESTPatchAPIGuildRoleResult,
  RESTPatchAPIGuildTemplateJSONBody,
  RESTPatchAPIGuildTemplateResult,
  RESTPatchAPIGuildWidgetSettingsJSONBody,
  RESTPatchAPIGuildWidgetSettingsResult,
  RESTPatchAPIWebhookJSONBody,
  RESTPatchAPIWebhookResult,
  RESTPatchAPIWebhookWithTokenJSONBody,
  RESTPatchAPIWebhookWithTokenMessageJSONBody,
  RESTPostAPIChannelFollowersJSONBody,
  RESTPostAPIChannelFollowersResult,
  RESTPostAPIChannelInviteJSONBody,
  RESTPostAPIChannelInviteResult,
  RESTPostAPIChannelMessageCrosspostResult,
  RESTPostAPIChannelMessageJSONBody,
  RESTPostAPIChannelMessageResult,
  RESTPostAPIChannelMessagesBulkDeleteJSONBody,
  RESTPostAPIChannelMessagesBulkDeleteResult,
  RESTPostAPIChannelTypingResult,
  RESTPostAPIChannelWebhookJSONBody,
  RESTPostAPICurrentUserCreateDMChannelJSONBody,
  RESTPostAPICurrentUserCreateDMChannelResult,
  RESTPostAPIGuildChannelJSONBody,
  RESTPostAPIGuildChannelResult,
  RESTPostAPIGuildEmojiJSONBody,
  RESTPostAPIGuildEmojiResult,
  RESTPostAPIGuildIntegrationJSONBody,
  RESTPostAPIGuildIntegrationResult,
  RESTPostAPIGuildIntegrationSyncResult,
  RESTPostAPIGuildPruneJSONBody,
  RESTPostAPIGuildPruneResult,
  RESTPostAPIGuildRoleJSONBody,
  RESTPostAPIGuildRoleResult,
  RESTPostAPIGuildTemplatesJSONBody,
  RESTPostAPIGuildTemplatesResult,
  RESTPostAPIGuildsJSONBody,
  RESTPostAPIGuildsResult,
  RESTPostAPITemplateCreateGuildJSONBody,
  RESTPostAPITemplateCreateGuildResult,
  RESTPostAPIWebhookWithTokenGitHubQuery,
  RESTPostAPIWebhookWithTokenGitHubResult,
  RESTPostAPIWebhookWithTokenGitHubWaitResult,
  RESTPostAPIWebhookWithTokenJSONBody,
  RESTPostAPIWebhookWithTokenResult,
  RESTPostAPIWebhookWithTokenSlackQuery,
  RESTPostAPIWebhookWithTokenSlackResult,
  RESTPostAPIWebhookWithTokenSlackWaitResult,
  RESTPutAPIChannelMessageReactionResult,
  RESTPutAPIChannelPermissionJSONBody,
  RESTPutAPIChannelPermissionResult,
  RESTPutAPIGuildBanJSONBody,
  RESTPutAPIGuildBanResult,
  RESTPutAPIGuildMemberJSONBody,
  RESTPutAPIGuildMemberResult,
  RESTPutAPIGuildMemberRoleResult,
  RESTPutAPIGuildTemplateSyncResult
} from 'discord-api-types/v8';

interface webhookIdOrToken { webhookID: Snowflake; webhookToken?: string }

export const makeRestUtils = (rest: RestManager) => (
  {
    createGuild: (data: RESTPostAPIGuildsJSONBody) => rest.post<RESTPostAPIGuildsResult, RESTPostAPIGuildsJSONBody>(Routes.guilds(), { data }),
    fetchGuild: (...args: Parameters<typeof Routes.guild>) => rest.get<RESTGetAPIGuildResult>(Routes.guild(...args)),
    fetchGuildPreview: (...args: Parameters<typeof Routes.guildPreview>) => rest.get<APIGuildPreview>(Routes.guildPreview(...args)),
    editGuild: (guildID: Snowflake, data: RESTPatchAPIGuildJSONBody) => rest.patch<RESTPatchAPIGuildResult, RESTPatchAPIGuildJSONBody>(Routes.guild(guildID), { data }),
    deleteGuild: (...args: Parameters<typeof Routes.guild>) => rest.delete<RESTDeleteAPIGuildResult>(Routes.guild(...args)),
    fetchGuildChannels: (...args: Parameters<typeof Routes.guildChannels>) => rest.get<RESTGetAPIGuildChannelsResult>(Routes.guildChannels(...args)),
    createGuildChannel: (guildID: Snowflake, data: RESTPostAPIGuildChannelJSONBody) => rest.post<RESTPostAPIGuildChannelResult, RESTPostAPIGuildChannelJSONBody>(Routes.guildChannels(guildID), { data }),
    fetchGuildMember: (...args: Parameters<typeof Routes.guildMember>) => rest.get<RESTGetAPIGuildMemberResult>(Routes.guildMember(...args)),
    addGuildMember: (guildID: Snowflake, userID: Snowflake, data: RESTPutAPIGuildMemberJSONBody) => rest.put<RESTPutAPIGuildMemberResult, RESTPutAPIGuildMemberJSONBody>(Routes.guildMember(guildID, userID), { data }),
    editGuildMember: (guildID: Snowflake, userID: Snowflake, data: RESTPatchAPIGuildMemberJSONBody) => rest.patch<RESTPatchAPIGuildMemberResult, RESTPatchAPIGuildMemberJSONBody>(Routes.guildMember(guildID, userID), { data }),
    setMeNickname: (guildID: Snowflake, data: RESTPatchAPICurrentGuildMemberNicknameJSONBody) => rest.patch<RESTPatchAPICurrentGuildMemberNicknameResult, RESTPatchAPICurrentGuildMemberNicknameJSONBody>(Routes.guildCurrentMemberNickname(guildID), { data }),
    addRole: (...args: Parameters<typeof Routes.guildMemberRole>) => rest.put<RESTPutAPIGuildMemberRoleResult>(Routes.guildMemberRole(...args)),
    removeRole: (...args: Parameters<typeof Routes.guildMemberRole>) => rest.delete<RESTDeleteAPIGuildMemberRoleResult>(Routes.guildMemberRole(...args)),
    kickMember: (...args: Parameters<typeof Routes.guildMember>) => rest.delete<RESTDeleteAPIGuildMemberResult>(Routes.guildMember(...args)),
    fetchGuildBans: (...args: Parameters<typeof Routes.guildBans>) => rest.get<RESTGetAPIGuildBansResult>(Routes.guildBans(...args)),
    fetchGuildBan: (...args: Parameters<typeof Routes.guildBan>) => rest.get<RESTGetAPIGuildBanResult>(Routes.guildBan(...args)),
    banMember: (guildID: Snowflake, userID: Snowflake, data: RESTPutAPIGuildBanJSONBody) => rest.put<RESTPutAPIGuildBanResult, RESTPutAPIGuildBanJSONBody>(Routes.guildBan(guildID, userID), { data }),
    unbanMember: (guildID: Snowflake, userID: Snowflake) => rest.delete<RESTDeleteAPIGuildBanResult>(Routes.guildBan(guildID, userID)),
    fetchRoles: (...args: Parameters<typeof Routes.guildMemberRole>) => rest.get<RESTGetAPIGuildRolesResult>(Routes.guildMemberRole(...args)),
    createRole: (guildID: Snowflake, data: RESTPostAPIGuildRoleJSONBody) => rest.post<RESTPostAPIGuildRoleResult, RESTPostAPIGuildRoleJSONBody>(Routes.guildRoles(guildID), { data }),
    setRolePosition: (guildID: Snowflake, data: RESTPatchAPIGuildRolePositionsJSONBody) => rest.patch<RESTPatchAPIGuildRolePositionsResult, RESTPatchAPIGuildRolePositionsJSONBody>(Routes.guildRoles(guildID), { data }),
    editRole: (guildID: Snowflake, roleID: Snowflake, data: RESTPatchAPIGuildRoleJSONBody) => rest.patch<RESTPatchAPIGuildRoleResult, RESTPatchAPIGuildRoleJSONBody>(Routes.guildRole(guildID, roleID), { data }),
    deleteRole: (...args: Parameters<typeof Routes.guildRole>) => rest.delete<RESTDeleteAPIGuildRoleResult>(Routes.guildRole(...args)),
    pruneGuild: (guildID: Snowflake, data: RESTPostAPIGuildPruneJSONBody) => rest.post<RESTPostAPIGuildPruneResult, RESTPostAPIGuildPruneJSONBody>(Routes.guildPrune(guildID), { data }),
    getPredictedPruneResult: (guildID: Snowflake, options: RESTGetAPIGuildPruneCountQuery) => rest.get<RESTGetAPIGuildPruneCountResult, RESTGetAPIGuildPruneCountQuery>(Routes.guildPrune(guildID), { query: options }),
    fetchGuildVoiceRegions: (...args: Parameters<typeof Routes.guildVoiceRegions>) => rest.get<RESTGetAPIGuildVoiceRegionsResult>(Routes.guildVoiceRegions(...args)),
    fetchGuildInvites: (...args: Parameters<typeof Routes.guildInvites>) => rest.get<RESTGetAPIGuildInvitesResult>(Routes.guildInvites(...args)),
    fetchGuildIntegration: (...args: Parameters<typeof Routes.guildIntegrations>) => rest.get<RESTGetAPIGuildIntegrationsResult>(Routes.guildIntegrations(...args)),
    createGuildIntegration: (guildID: Snowflake, data: RESTPostAPIGuildIntegrationJSONBody) => rest.post<RESTPostAPIGuildIntegrationResult, RESTPostAPIGuildIntegrationJSONBody>(Routes.guildIntegrations(guildID), { data }),
    editGuildIntegration: (guildID: Snowflake, integrationID: Snowflake, data: RESTPatchAPIGuildIntegrationJSONBody) => rest.patch<RESTPatchAPIGuildIntegrationResult, RESTPatchAPIGuildIntegrationJSONBody>(Routes.guildIntegration(guildID, integrationID), { data }),
    deleteGuildIntegration: (...args: Parameters<typeof Routes.guildIntegration>) => rest.delete<RESTDeleteAPIGuildIntegrationResult>(Routes.guildIntegration(...args)),
    syncGuildIntegration: (...args: Parameters<typeof Routes.guildIntegrationSync>) => rest.post<RESTPostAPIGuildIntegrationSyncResult, null>(Routes.guildIntegrationSync(...args), { data: null }),
    fetchGuildWidgetSettings: (...args: Parameters<typeof Routes.guildWidgetSettings>) => rest.get<RESTGetAPIGuildWidgetJSONResult>(Routes.guildWidgetSettings(...args)),
    fetchGuildWidget: (...args: Parameters<typeof Routes.guildWidgetImage>) => rest.get<RESTGetAPIGuildWidgetJSONResult>(Routes.guildWidgetImage(...args)),
    editGuildWidget: (guildID: Snowflake, data: RESTPatchAPIGuildWidgetSettingsJSONBody) => rest.patch<RESTPatchAPIGuildWidgetSettingsResult, RESTPatchAPIGuildWidgetSettingsJSONBody>(Routes.guildWidgetSettings(guildID), { data }),
    fetchGuildVanityURL: (...args: Parameters<typeof Routes.guildVanityUrl>) => rest.get<RESTGetAPIGuildVanityUrlResult>(Routes.guildVanityUrl(...args)),
    fetchGuildWidgetImage: (guildID: Snowflake, options: RESTGetAPIGuildWidgetImageQuery) => rest.get<RESTGetAPIGuildWidgetImageResult, RESTGetAPIGuildWidgetImageQuery>(Routes.guildWidgetImage(guildID), { query: options }),
    fetchChannel: (...args: Parameters<typeof Routes.channel>) => rest.get<APIChannel>(Routes.channel(...args)),
    editChannel: (channelID: Snowflake, data: RESTPatchAPIChannelJSONBody) => rest.patch<RESTPatchAPIChannelResult, RESTPatchAPIChannelJSONBody>(Routes.channel(channelID), { data }),
    deleteChannel: (...args: Parameters<typeof Routes.channel>) => rest.delete<APIChannel>(Routes.channel(...args)),
    fetchChannelMessages: (...args: Parameters<typeof Routes.channelMessages>) => rest.get<RESTGetAPIChannelMessagesResult>(Routes.channelMessages(...args)),
    fetchChannelMessage: (...args: Parameters<typeof Routes.channelMessage>) => rest.get<RESTGetAPIChannelMessageResult>(Routes.channelMessage(...args)),
    sendMessage: (channelID: Snowflake, data: RESTPostAPIChannelMessageJSONBody) => rest.post<RESTPostAPIChannelMessageResult, RESTPostAPIChannelMessageJSONBody>(Routes.channelMessages(channelID), { data }),
    crosspostMessage: (channelID: Snowflake, messageID: Snowflake) => rest.post<RESTPostAPIChannelMessageCrosspostResult, null>(Routes.channelMessageCrosspost(channelID, messageID), { data: null }),
    addReaction: (...args: Parameters<typeof Routes.channelMessageReaction>) => rest.put<RESTPutAPIChannelMessageReactionResult>(Routes.channelMessageReaction(...args)),
    deleteUserReaction: (channelID: Snowflake, messageID: Snowflake, emoji: Snowflake | string, userID?: Snowflake) => userID ? rest.delete<RESTDeleteAPIChannelMessageUserReactionResult>(Routes.channelMessageUserReaction(channelID, messageID, emoji, userID)) : rest.delete<RESTDeleteAPIChannelMessageOwnReaction>(Routes.channelMessageOwnReaction(channelID, messageID, emoji)),
    deleteAllMessageReactions: (...args: Parameters<typeof Routes.channelMessageAllReactions>) => rest.delete<RESTDeleteAPIChannelAllMessageReactionsResult>(Routes.channelMessageAllReactions(...args)),
    deleteAllEmoteReaction: (...args: Parameters<typeof Routes.channelMessageReaction>) => rest.delete<RESTDeleteAPIChannelMessageReactionResult>(Routes.channelMessageReaction(...args)),
    fetchMessageReactions: (channelID: Snowflake, messageID: Snowflake, emoji: Snowflake | string, options: RESTGetAPIChannelMessagesQuery) => rest.get<RESTGetAPIChannelMessageResult, RESTGetAPIChannelMessagesQuery>(Routes.channelMessageReaction(channelID, messageID, emoji), { query: options }),
    editMessage: (channelID: Snowflake, messageID: Snowflake, data: RESTPatchAPIChannelMessageJSONBody) => rest.patch<RESTPatchAPIChannelMessageResult, RESTPatchAPIChannelMessageJSONBody>(Routes.channelMessage(channelID, messageID), { data }),
    deleteMessage: (...args: Parameters<typeof Routes.channelMessage>) => rest.delete(Routes.channelMessage(...args)),
    bulkDeleteMessages: (channelID: Snowflake, data: RESTPostAPIChannelMessagesBulkDeleteJSONBody) => rest.post<RESTPostAPIChannelMessagesBulkDeleteResult, RESTPostAPIChannelMessagesBulkDeleteJSONBody>(Routes.channelBulkDelete(channelID), { data }),
    editChannelPermissions: (channelID: Snowflake, owerwriteID: Snowflake, data: RESTPutAPIChannelPermissionJSONBody) => rest.put<RESTPutAPIChannelPermissionResult, RESTPutAPIChannelPermissionJSONBody>(Routes.channelPermission(channelID, owerwriteID), { data }),
    deleteChannelPermissions: (...args: Parameters<typeof Routes.channelPermission>) => rest.delete<RESTDeleteAPIChannelPermissionResult>(Routes.channelPermission(...args)),
    fetchChannelInvites: (...args: Parameters<typeof Routes.channelInvites>) => rest.get<RESTGetAPIChannelInvitesResult>(Routes.channelInvites(...args)),
    createChannelInvite: (channelID: Snowflake, data: RESTPostAPIChannelInviteJSONBody) => rest.post<RESTPostAPIChannelInviteResult, RESTPostAPIChannelInviteJSONBody>(Routes.channelInvites(channelID), { data }),
    followNewsChannel: (channelID: Snowflake, data: RESTPostAPIChannelFollowersJSONBody) => rest.post<RESTPostAPIChannelFollowersResult, RESTPostAPIChannelFollowersJSONBody>(Routes.channelFollowers(channelID), { data }),
    startTyping: (...args: Parameters<typeof Routes.channelTyping>) => rest.get<RESTPostAPIChannelTypingResult>(Routes.channelTyping(...args)),
    fetchPinnedChannelMessages: (...args: Parameters<typeof Routes.channelPins>) => rest.get<RESTGetAPIChannelPinsResult>(Routes.channelPins(...args)),
    deletePinnedChannelMessage: (...args: Parameters<typeof Routes.channelPin>) => rest.delete<RESTDeleteAPIChannelPinResult>(Routes.channelPin(...args)),
    addPinnedChannelMessage: (...args: Parameters<typeof Routes.channelPin>) => rest.put<RESTDeleteAPIChannelPinResult>(Routes.channelPin(...args)),
    fetchAuditLogs: (guildID: Snowflake, options?: RESTGetAPIAuditLogQuery) => rest.get<APIAuditLog, RESTGetAPIAuditLogQuery>(Routes.guildAuditLog(guildID), { query: options }),
    fetchInvite: (...args: Parameters<typeof Routes.invite>) => rest.get<RESTGetAPIInviteResult>(Routes.invite(...args)),
    deleteInvite: (...args: Parameters<typeof Routes.invite>) => rest.delete<RESTDeleteAPIInviteResult>(Routes.invite(...args)),
    createWebhook: (channelID: Snowflake, data: RESTPostAPIChannelWebhookJSONBody) => rest.post<APIWebhook, RESTPostAPIChannelWebhookJSONBody>(Routes.channelWebhooks(channelID), { data }),
    fetchWebhooks: (...args: Parameters<typeof Routes.channelWebhooks>) => rest.get<RESTGetAPIChannelWebhooksResult>(Routes.channelWebhooks(...args)),
    fetchWebhook: (...args: Parameters<typeof Routes.webhook>) => rest.get<RESTGetAPIWebhookResult>(Routes.webhook(...args)),
    editWebhook: ({ webhookID, webhookToken }: webhookIdOrToken, data: RESTPatchAPIWebhookJSONBody | RESTPatchAPIWebhookWithTokenJSONBody) => rest.patch<RESTPatchAPIWebhookResult, RESTPatchAPIWebhookJSONBody>(Routes.webhook(webhookID, webhookToken), { data }),
    deleteWebhook: ({ webhookID, webhookToken }: webhookIdOrToken) => rest.delete<RESTDeleteAPIWebhookResult>(Routes.webhook(webhookID, webhookToken)),
    sendWebhookMessage: (webhookID: Snowflake, webhookToken: string, data: RESTPostAPIWebhookWithTokenJSONBody) => rest.post<RESTPostAPIWebhookWithTokenResult, RESTPostAPIWebhookWithTokenJSONBody>(Routes.webhook(webhookID, webhookToken), { data }),
    editWebhookMessage: (webhookID: Snowflake, webhookToken: string, messageID: Snowflake, data: RESTPatchAPIWebhookWithTokenMessageJSONBody) => rest.patch<APIMessage, RESTPatchAPIWebhookWithTokenMessageJSONBody>(Routes.webhookMessage(webhookID, webhookToken, messageID), { data }),
    fetchGuildEmojis: (...args: Parameters<typeof Routes.guildEmojis>) => rest.get<RESTGetAPIGuildEmojisResult>(Routes.guildEmojis(...args)),
    fetchGuildEmoji: (...args: Parameters<typeof Routes.guildEmoji>) => rest.get<RESTGetAPIGuildEmojiResult>(Routes.guildEmoji(...args)),
    createGuildEmoji: (guildID: Snowflake, data: RESTPostAPIGuildEmojiJSONBody) => rest.post<RESTPostAPIGuildEmojiResult, RESTPostAPIGuildEmojiJSONBody>(Routes.guildEmojis(guildID), { data }),
    editGuildEmoji: (guildID: Snowflake, emojiID: Snowflake, data: RESTPatchAPIGuildEmojiJSONBody) => rest.patch<RESTPatchAPIGuildEmojiResult, RESTPatchAPIGuildEmojiJSONBody>(Routes.guildEmoji(guildID, emojiID), { data }),
    deleteGuildEmoji: (...args: Parameters<typeof Routes.guildEmoji>) => rest.delete<RESTDeleteAPIGuildEmojiResult>(Routes.guildEmoji(...args)),
    fetchMe: () => rest.get<RESTGetAPICurrentUserResult>(Routes.user()),
    fetchUser: (userID?: Snowflake | null) => rest.get<RESTGetAPIUserResult>(Routes.user(userID ?? undefined)),
    editMe: (data: RESTPatchAPICurrentUserJSONBody) => rest.patch<RESTPatchAPICurrentUserResult, RESTPatchAPICurrentUserJSONBody>(Routes.user(), { data }),
    leaveGuild: (...args: Parameters<typeof Routes.guild>) => rest.delete<RESTDeleteAPICurrentUserGuildResult>(Routes.guild(...args)),
    createDM: (data: RESTPostAPICurrentUserCreateDMChannelJSONBody) => rest.post<RESTPostAPICurrentUserCreateDMChannelResult, RESTPostAPICurrentUserCreateDMChannelJSONBody>(Routes.userChannels(), { data }),
    getUserConnections: () => rest.get<RESTGetAPICurrentUserConnectionsResult>(Routes.userConnections()),
    fetchTemplate: (...args: Parameters<typeof Routes.template>) => rest.get<RESTGetAPITemplateResult>(Routes.template(...args)),
    createGuildFromTemplate: (guildID: Snowflake, data: RESTPostAPITemplateCreateGuildJSONBody) => rest.post<RESTPostAPITemplateCreateGuildResult, RESTPostAPITemplateCreateGuildJSONBody>(Routes.template(guildID), { data }),
    fetchGuildTemplates: (...args: Parameters<typeof Routes.guildTemplates>) => rest.get<RESTGetAPIGuildTemplatesResult>(Routes.guildTemplates(...args)),
    createGuildTemplate: (guildID: Snowflake, data: RESTPostAPIGuildTemplatesJSONBody) => rest.post<RESTPostAPIGuildTemplatesResult, RESTPostAPIGuildTemplatesJSONBody>(Routes.guildTemplates(guildID), { data }),
    executeSlackWebhook: (webhookID: Snowflake, webhookToken: string, options: RESTPostAPIWebhookWithTokenSlackQuery) => rest.post<RESTPostAPIWebhookWithTokenSlackResult | RESTPostAPIWebhookWithTokenSlackWaitResult, null, RESTPostAPIWebhookWithTokenSlackQuery>(Routes.webhookPlatform(webhookID, webhookToken, 'slack'), { data: null, query: options }),
    executeGithubWebhook: (webhookID: Snowflake, webhookToken: string, options: RESTPostAPIWebhookWithTokenGitHubQuery) => rest.post<RESTPostAPIWebhookWithTokenGitHubResult | RESTPostAPIWebhookWithTokenGitHubWaitResult, null, RESTPostAPIWebhookWithTokenGitHubQuery>(Routes.webhookPlatform(webhookID, webhookToken, 'github'), { data: null, query: options }),
    syncGuildTemplate: (guildID: Snowflake, templateCode: string) => rest.put<RESTPutAPIGuildTemplateSyncResult>(Routes.guildTemplate(guildID, templateCode)),
    editGuildTemplate: (guildID: Snowflake, templateCode: string, data: RESTPatchAPIGuildTemplateJSONBody) => rest.patch<RESTPatchAPIGuildTemplateResult, RESTPatchAPIGuildTemplateJSONBody>(Routes.guildTemplate(guildID, templateCode), { data }),
    deleteGuildTemplate: (...args: Parameters<typeof Routes.guildTemplate>) => rest.delete<RESTDeleteAPIGuildTemplateResult>(Routes.guildTemplate(...args))
  }
);
